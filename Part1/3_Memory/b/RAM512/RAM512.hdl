// This file is part of the materials accompanying the book
// "The Elements of Computing Systems" by Nisan and Schocken,
// MIT Press. Book site: www.idc.ac.il/tecs

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    // Implementation by Matt Buckley
    PARTS:
    // Idea: 3 most significant bits of address refer to which RAM64
    // unit and the 6 least significant bits refer to the particular
    // register within that RAM64

    // Use 8 way DMux to set the load bit to 0 for every
    // RAM64 other than the RAM64 referred to by the 3 most
    // significant bits of address
    DMux8Way(in=load, sel=address[6..8], a=load0, b=load1, c=load2, d=load3,
                                         e=load4, f=load5, g=load6, h=load7);

    // Then feed the input to the 8 RAM8 units with the
    // individual load bits and the first 6 bits of address
    RAM64(in=in, load=load0, address=address[0..5], out=outA);
    RAM64(in=in, load=load1, address=address[0..5], out=outB);
    RAM64(in=in, load=load2, address=address[0..5], out=outC);
    RAM64(in=in, load=load3, address=address[0..5], out=outD);
    RAM64(in=in, load=load4, address=address[0..5], out=outE);
    RAM64(in=in, load=load5, address=address[0..5], out=outF);
    RAM64(in=in, load=load6, address=address[0..5], out=outG);
    RAM64(in=in, load=load7, address=address[0..5], out=outH);

    // Lastly, use 16 bit 8 way Mux to select the output from the
    // appropriate RAM64 unit based on the 3 most significant bits
    // of address
    Mux8Way16(a=outA, b=outB, c=outC, d=outD, e=outE, f=outF,
              g=outG, h=outH, sel=address[6..8], out=out);
}
