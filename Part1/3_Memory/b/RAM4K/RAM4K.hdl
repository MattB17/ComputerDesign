// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.

/**
 * Memory of 4K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    // Implementation by Matt Buckley
    PARTS:
    // Idea: 3 most significant bits of address refer to which RAM512
    // unit and the 9 least significant bits refer to the particular
    // register within that RAM512

    // Use 8 way DMux to set the load bit to 0 for every
    // RAM512 other than the RAM512 referred to by the 3 most
    // significant bits of address
    DMux8Way(in=load, sel=address[9..11], a=load0, b=load1, c=load2, d=load3,
                                          e=load4, f=load5, g=load6, h=load7);

    // Then feed the input to the 8 RAM512 units with the
    // individual load bits and the first 9 bits of address
    RAM512(in=in, load=load0, address=address[0..8], out=outA);
    RAM512(in=in, load=load1, address=address[0..8], out=outB);
    RAM512(in=in, load=load2, address=address[0..8], out=outC);
    RAM512(in=in, load=load3, address=address[0..8], out=outD);
    RAM512(in=in, load=load4, address=address[0..8], out=outE);
    RAM512(in=in, load=load5, address=address[0..8], out=outF);
    RAM512(in=in, load=load6, address=address[0..8], out=outG);
    RAM512(in=in, load=load7, address=address[0..8], out=outH);

    // Lastly, use 16 bit 8 way Mux to select the output from the
    // appropriate RAM512 unit based on the 3 most significant bits
    // of address
    Mux8Way16(a=outA, b=outB, c=outC, d=outD, e=outE, f=outF,
              g=outG, h=outH, sel=address[9..11], out=out);
}
