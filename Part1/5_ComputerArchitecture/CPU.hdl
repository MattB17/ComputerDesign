// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // Implementation by Matt Buckley
    // A instructions have the form 0 <address> where <address> is a
    // 15-bit address. C instructions have the form 111accccccdddjjj
    PARTS:
    // Use Mux16 to decide whether to load instruction or previous ALU output
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=AIn);

    // Load data into A Register if it is an A instruction or the A register
    // bit is 1
    Not(in=instruction[15], out=isA);
    Or(a=isA, b=instruction[5], out=loadA);
    ARegister(in=AIn, load=loadA, out=AOut, out[0..14]=addressM);

    // we writeM is 1 if it is a C instruction and the third destination
    // bit is 1
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Use a Mux16 to decide on the y value for the ALU. If the a bit in
    // c instruction is 1 then we load inM, otherwise, we load the value
    // in the A register
    And(a=instruction[15], b=instruction[12], out=loadIn);
    Mux16(a=AOut, b=inM, sel=loadIn, out=yALU);

    // D register is loaded if instruction is a C instruction and
    // the second d bit in instruction is 1
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUOut, load=loadD, out=xALU);

    // the ALU. If instruction is a C instruction then the 6 c bits are
    // the control bits of the ALU. If instruction is an A instruction
    // the ALU output does not matter so we just use the 6 c bits anyway
    ALU(x=xALU, y=yALU, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUOut, out=outM, zr=zr, ng=ng);
}
