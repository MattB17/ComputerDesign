// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    // Implementation by Matt Buckley
    PARTS:
    // Use 4 way DMux to decide what area of memory the load bit applies to.
    // This is done using the 2 most significant bits of address. If these
    // are 00 or 01 it refers to RAM, 10 refers to Screen, and 11 refers
    // to Keyboard
    DMux4Way(in=load, sel=address[13..14],
             a=loadRAMa, b=loadRAMb, c=loadScreen, d=loadKeyboard);
    Or(a=loadRAMa, b=loadRAMb, out=loadRAM);

    // The 3 components of memory with the load bits set from the DMux
    RAM16K(in=in, load=loadRAM, address=address[0..13], out=RAMOut);
    Screen(in=in, load=loadScreen, address=address[0..12], out=ScreenOut);
    Keyboard(out=KeyboardOut);

    // Select the correct output using a 4 way 16-bit Mux. The selection is
    // made based on the 2 most significant bits of address. If these are 00
    // or 01, then the RAM output is chosen. If they are 10, the screen
    // output is chosen. The keyboard output is chosen if these are 11
    Mux4Way16(a=RAMOut, b=RAMOut, c=ScreenOut, d=KeyboardOut,
              sel=address[13..14], out=out);
}
