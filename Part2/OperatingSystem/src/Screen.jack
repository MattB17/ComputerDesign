// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    // Identifies whether the current draw color is black.
    static boolean is_black_;

    // Stores the powers of 2 for quickly picking the ith bit of a number.
    static Array twoToThe_;

    static int screen_base_addr_;

    /** Initializes the Screen. */
    function void init() {
      let is_black_ = true;

      let twoToThe_ = Array.new(16);
      let twoToThe_[0] = 1;
      let twoToThe_[1] = 2;
      let twoToThe_[2] = 4;
      let twoToThe_[3] = 8;
      let twoToThe_[4] = 16;
      let twoToThe_[5] = 32;
      let twoToThe_[6] = 64;
      let twoToThe_[7] = 128;
      let twoToThe_[8] = 256;
      let twoToThe_[9] = 512;
      let twoToThe_[10] = 1024;
      let twoToThe_[11] = 2048;
      let twoToThe_[12] = 4096;
      let twoToThe_[13] = 8192;
      let twoToThe_[14] = 16384;
      let twoToThe_[15] = ~32767;

      let screen_base_addr_ = 16384;

      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var boolean curr_color;

      let curr_color = is_black_;

      let is_black_ = false;
      do Screen.drawRectangle(0, 0, 511, 255);
      let is_black_ = curr_color;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let is_black_ = b;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int offset, curr_value;

      let offset = (32 * y) + (x / 16);
      let curr_value = Memory.peek(screen_base_addr_ + offset);

      // If the current color is black we want to set the bit.
      if (is_black_) {
        // We take a power of 2 which has a 1 in that bit and 0 elsewhere. Then
        // we or it with the current value, this will have the effect of leaving
        // all the other bits of the current value unchanged and setting the
        // bit of interest to 1.
        let curr_value = curr_value | twoToThe_[x % 16];
      } else {
        // Otherwise, we want to set the current bit to white. So we take a
        // power of 2 that has a 1 in that bit and 0 elsewhere. We not it to get
        // a 0 in that bit and 1 elsewhere and then and it with the current
        // value. This will leave all other bits of the current value unchanged
        // and set the bit of interest to 0.
        let curr_value = curr_value & (~(twoToThe_[x % 16]));
      }

      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int curr_x, curr_y;
      var boolean x_inc, y_inc;

      let curr_x = x1;
      let curr_y = y1;

      // Whether we need to increase or decrease x to reach (x2, y2).
      if (x1 < x2) {
        let x_inc = true;
      } else {
        let x_inc = false;
      }

      // Whether we need to increase or decrease y to reach (x2, y2).
      if (y1 < y2) {
        let y_inc = true;
      } else {
        let y_inc = false;
      }

      // Optimize for drawing a straight horizontal line really fast.
      if (y1 = y2) {
        if (x_inc) {
          while (~(curr_x > x2)) {
            do Screen.drawPixel(curr_x, curr_y);
            let curr_x = curr_x + 1;
          }
        } else {
          while (~(curr_x < x2)) {
            do Screen.drawPixel(curr_x, curr_y);
            let curr_x = curr_x - 1;
          }
        }
      }

      // Optimize for drawing a straight vertical line really fast.
      if (x1 = x2) {
        if (y_inc) {
          while (~(curr_y > y2)) {
            do Screen.drawPixel(curr_x, curr_y);
            let curr_y = curr_y + 1;
          }
        } else {
          while (~(curr_y < y2)) {
            do Screen.drawPixel(curr_x, curr_y);
            let curr_y = curr_y - 1;
          }
        }
      }

      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int curr_y, y_inc, y_diff, diff_y_cnt;

      let curr_y = y1;
      let diff_y_cnt = 0;

      // Identifies whether y1 < y2 or y2 >= y1.
      if (y1 < y2) {
        let y_inc = 1;
        y_diff = y2 - y1;
      } else {
        let y_inc = -1;
        y_diff = y1 - y2;
      }

      while (~(diff_y_cnt > y_diff)) {
        do Screen.drawLine(x1, curr_y, x2, curr_y);
        let curr_y = curr_y + y_inc;
        let diff_y_cnt = diff_y_cnt + 1;
      }

      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    }
}
