// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    static int keyboard_addr_;
    static int max_str_len_;

    /** Initializes the keyboard. */
    function void init() {
      let keyboard_addr_ = 24576;
      let max_str_len_ = 64;

      return;
    }

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
      return Memory.peek(keyboard_addr_);
    }

    /**
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character
     * of the pressed key.
     */
    function char readChar() {
      var char c;

      do Output.displayCursor();

      while (Keyboard.keyPressed() = 0) {
        do Sys.wait(25);
        do Output.eraseCursor();
        do Sys.wait(25);
        do Output.displayCursor();
      }

      let c = Keyboard.keyPressed();

      while (~(Keyboard.keyPressed() = 0)) {
        do Sys.wait(25);
        do Output.eraseCursor();
        do Sys.wait(25);
        do Output.displayCursor();
      }

      do Output.eraseCursor();

      if (c = 128) {
        do Output.println();
        return c;
      }

      if (c = 129) {
        do Output.backSpace();
        return c;
      }

      do Output.printChar(c);
      return c;
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
      var String s;
      var char next_char;

      do Output.printString(message);

      let s = String.new(64);

      while (true) {
        let next_char = Keyboard.readChar();
        if (next_char = 128) {
          return s;
        }
        if (next_char = 129) {
          do s.eraseLastChar();
        } else {
          let s = s.appendChar(next_char);
        }
      }

      return s;
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces.
     */
    function int readInt(String message) {
      var boolean keep_reading, is_negative;
      var char next_char;
      var int curr_int;

      do Output.printString(message);

      let keep_reading = true;
      let is_negative = false;
      let curr_int = 0;

      let next_char = Keyboard.readChar();

      // negative sign.
      if (next_char = 45) {
        let is_negative = true;
        let next_char = Keyboard.readChar();
      }

      while (keep_reading) {
        // We have a digit.
        if ((next_char > 47) & (next_char < 58)) {
          let curr_int = (10 * curr_int) + (next_char - 48);
          let next_char = Keyboard.readChar();
        } else {
          if (next_char = 129) {
            // backspace, so we remove the last digit.
            let curr_int = curr_int / 10;
            let next_char = Keyboard.readChar();
          } else {
            // We don't have a numeric character.
            let keep_reading = false;
          }
        }
      }
      if (is_negative) {
        return -curr_int;
      }
      return curr_int;
    }
}
