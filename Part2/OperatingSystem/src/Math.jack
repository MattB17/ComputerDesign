// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe_;

    /** Initializes the library. */
    function void init() {
      let twoToThe_ = Array.new(16);
      let twoToThe_[0] = 1;
      let twoToThe_[1] = 2;
      let twoToThe_[2] = 4;
      let twoToThe_[3] = 8;
      let twoToThe_[4] = 16;
      let twoToThe_[5] = 32;
      let twoToThe_[6] = 64;
      let twoToThe_[7] = 128;
      let twoToThe_[8] = 256;
      let twoToThe_[9] = 512;
      let twoToThe_[10] = 1024;
      let twoToThe_[11] = 2048;
      let twoToThe_[12] = 4096;
      let twoToThe_[13] = 8192;
      let twoToThe_[14] = 16384;
      let twoToThe_[15] = ~32767;
      return;
    }

    /** Returns true if the bit at position bit_idx of x is 1. */
    function boolean bitIsOneAtIndex(int x, int bit_idx) {
      return (~((x & twoToThe_[bit_idx]) = 0));
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return -x;
      } else {
        return x;
      }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int idx, sum, shifted_x;

      let idx = 0;
      let sum = 0;
      let shifted_x = x;

      while (idx < 16) {
        if (Math.bitIsOneAtIndex(y, idx)) {
          let sum = sum + shifted_x;
        }
        let shifted_x = shifted_x + shifted_x;
        let idx = idx + 1;
      }

      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int q, y2, result;
      var boolean negative_result;

      if ((y < 0) & (x < 0)) {
        let negative_result = false;
      } else {
        if ((x > 0) & (y > 0)) {
          let negative_result = false;
        } else {
          let negative_result = true;
        }
      }

      let x = Math.abs(x);
      let y = Math.abs(y);

      if ((y > x) | (y < 0)) {
        return 0;
      }

      let y2 = y + y;
      let q = Math.divide(x, y2);
      if ((x - (y2 * q)) < y) {
        let result = (q + q);
      } else {
        let result = (q + q + 1);
      }

      if (negative_result) {
        return -result;
      } else {
        return result;
      }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, j, new_y, new_y_2;

      let y = 0;
      let j = 7;
      while (~(j < 0)) {
        let new_y = y + twoToThe_[j];
        let new_y_2 = new_y * new_y;
        if ((~(new_y_2 > x)) & (new_y_2 > 0)) {
          let y = new_y;
        }
        let j = j - 1;
      }

      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) {
        return a;
      } else {
        return b;
      }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      } else {
        return b;
      }
    }
}
