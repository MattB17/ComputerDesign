// Represents the user-controlled jumper in the game.

class Jumper {
  field int x_, y_; // screen position of the Jumper's top right corner.

  // the height of the jumper (number of rows), this is also the length of
  // the row-wise bitmap array.
  field int height_;

  field Array bitmap_vals_; // the row-wise bitmap values of the obstacle.

  constructor Jumper new(int x, int y, int height, Array bitmap_vals) {
    let x_ = x;
    let y_ = y;
    let height_ = height_;
    let bitmap_vals_ = bitmap_vals;
    return this;
  }

  method void dispose() {
    do bitmap_vals_.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void draw() {
    do Utils.drawBitMapArray(x_, y_, height_, bitmap_vals_);
    return;
  }

  method void erase() {
    do Utils.eraseBitMap(x_, y_, height_);
    return;
  }

  method void shiftDown(int num_rows) {
    let y_ = y_ + num_rows;
    return;
  }

  method void shiftUp(int num_rows) {
    let y_ = y_ - num_rows;
    return;
  }

  method void shiftRight(int num_cols) {
    let x_ = x_ + num_cols;
    return;
  }

  method void shiftLeft(int num_cols) {
    let x_ = x_ - num_cols;
    return;
  }

  method bool isBelowBoard() {
    return Utils.isBelowBoard(y_);
  }
}
