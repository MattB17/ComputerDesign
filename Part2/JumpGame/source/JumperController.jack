// A controller used to manage the Jumper throughout the game.

class JumperController {
  field Jumper jumper_; // the Jumper that is controlled by the user.

  // the shift size when the Jumper is stationary. If the Jumper is stationary
  // it is standing on a platform and so should shift down at the same speed
  // as the platform.
  field int stationary_shift_size_;

  // the shift size when the Jumper is in a jump.
  field int jump_shift_size_;

  constructor JumperController new(
    int stationary_shift_size, int jump_shift_size) {
    let jumper_ = Jumper.new(400, 199, 16, Constants.jumperBitMap());
    let stationary_shift_size_ = stationary_shift_size;
    let jump_shift_size_ = jump_shift_size;
    return this;
  }

  method void dispose() {
    do jumper_.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void drawJumper() {
    do jumper_.draw();
    return;
  }

  method void eraseJumper() {
    do jumper_.erase();
    return;
  }

  // returns a bool to signal whether the control loop was successful and the
  // jumper is still alive
  method bool runControlLoop() {
    do jumper_.erase();

    do jumper_.shiftDown(stationary_shift_size_);

    if (~(jumper_.isBelowBoard())) {
      do jumper_.draw();
      return true;
    }

    return false;
  }
}
