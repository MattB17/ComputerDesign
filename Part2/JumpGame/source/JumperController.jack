// A controller used to manage the Jumper throughout the game.

class JumperController {
  // the Jumper that is controlled by the user.
  field Jumper jumper_;

  // the shift size when the Jumper is stationary. If the Jumper is stationary
  // it is standing on a platform and so should shift down at the same speed
  // as the platform.
  field int stationary_shift_size_;

  // the shift size when the Jumper is in motion.
  field int moving_shift_size_;

  // identifies whether the jumper is currently in a jump.
  field bool in_jump_;

  // identifies the jumper's current horizontal direction.
  // a value of 0 indicates no horizontal movement, 1 for left, 2 for right.
  field int horizontal_direction_;

  // identifies if the jumper is moving upwards (at the start of a jump).
  // otherwise, the jumper is moving down, it is either falling at the end of
  // a jump or moving down while standing on a platform.
  field bool moving_up_;

  // used to track how high the jumper has jumped. This measures the upward
  // motion of the jumper (in units of 16-bit blocks) to signal when the jumper
  // will start to fall.
  field int jump_height_;

  // Constructs a new JumperController.
  constructor JumperController new(int stationary_shift_size) {
    let jumper_ = Jumper.new(
      400, 199, Constants.blockSize(), Constants.jumperBitMap());
    let stationary_shift_size_ = stationary_shift_size;
    let moving_shift_size_ = Constants.blockSize();
    let in_jump_ = false;
    let horizontal_direction_ = 0;
    let moving_up_ = false;
    let jump_height_ = 0;
    return this;
  }

  // disposes of the JumperController.
  method void dispose() {
    do jumper_.dispose();
    do Memory.deAlloc(this);
    return;
  }

  // Indicates whether the jumper is currently jumping.
  method bool isJumping() {
    return in_jump_;
  }

  // Draws the jumper.
  method void drawJumper() {
    do jumper_.draw();
    return;
  }

  // Erases the jumper.
  method void eraseJumper() {
    do jumper_.erase();
    return;
  }

  // Initiates a jump by starting the upward movement of the jumper.
  method void startJump() {
    let in_jump_ = true;
    let moving_up_ = true;
    let jump_height_ = 0;
    return;
  }

  // Transitions to the second half of the jump where the jumper begins to fall.
  method void setDownMovement() {
    let moving_up_ = false;
    let jump_height_ = 0;
    let horizontal_direction_ = 0;
    return;
  }

  // Sets the jumper moving left.
  method void setLeftMovement() {
    let horizontal_direction_ = 1;
    return;
  }

  // Sets the jumper moving right.
  method void setRightMovement() {
    let horizontal_direction_ = 2;
    return;
  }

  // controls the vertical movement of the jumper.
  method void handleVerticalMovement() {
    var int gap_from_object;

    if (in_jump_) {
      if (moving_up_) {
        let gap_from_object = jumper_.gapBelowObject();
        if (gap_from_object < Constants.blockSize()) {
          do jumper_.shiftUp(gap_from_object - 1);
          let moving_up_ = false;
          let jump_height_ = 0;
        } else {
          do jumper_.shiftUp(moving_shift_size_);
          // the jumper has moved up another 16-bit block.
          let jump_height_ = jump_height_ + 1;
        }
      } else {
        let gap_from_object = jumper_.gapAbovePlatform();
        if (gap_from_object < Constants.blockSize()) {
          do jumper_.shiftDown(gap_from_object);
          let in_jump_ = false;
        } else {
          do jumper_.shiftDown(moving_shift_size_);
        }
      }
    } else {
      do jumper_.shiftDown(stationary_shift_size_);
    }

    return;
  }

  // controls the horizontal movement of the jumper.
  method void handleHorizontalMovement() {
    var int gap_from_object;

    if (horizontal_direction_ = 1) {
      if (in_jump_ | jumper_.onPlatformAfterLeftStep(moving_shift_size_)) {
        let gap_from_object = jumper_.gapFromObjectOnLeft();
        if (gap_from_object < Constants.blockSize()) {
          do jumper_.shiftLeft(gap_from_object);
          let moving_up_ = false;
          let jump_height_ = 0;
        } else {
          do jumper_.shiftLeft(moving_shift_size_);
        }
      } else {
        let horizontal_direction_ = 0;
      }
    }

    if (horizontal_direction_ = 2) {
      if (in_jump_ | jumper_.onPlatformAfterRightStep(moving_shift_size_)) {
        let gap_from_object = jumper_.gapFromObjectOnRight();
        if (gap_from_object < Constants.blockSize()) {
          do jumper_.shiftRight(gap_from_object);
          let moving_up_ = false;
          let jump_height_ = 0;
        } else {
          do jumper_.shiftRight(moving_shift_size_);
        }
      } else {
        let horizontal_direction_ = 0;
      }
    }

    return;
  }

  // returns a bool to signal whether the control loop was successful and the
  // jumper is still alive
  method bool runControlLoop() {
    do jumper_.erase();

    do handleVerticalMovement();
    do handleHorizontalMovement();

    // checks if the jumper has reached peak jump height signifying that the
    // jumper should start to fall.
    if (jump_height_ > (Constants.jumpBlocks() - 1)) {
      let moving_up_ = false;
    }

    if (~(jumper_.isBelowBoard())) {
      do jumper_.draw();
      return true;
    }

    return false;
  }
}
