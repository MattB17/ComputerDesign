// A representation of the platform on which the avatar lands

class Platform {
    field int x_, y_;  // screen location of the platform's top-left corner
    field int width_, height_; // the width and height of the platform

    /**
      Constructs a new platform at a given location with a specific
      width and size
    */
    constructor Platform new(int x, int y, int width, int height) {
        let x_ = x;
        let y_ = y;
        let width_ = width;
        let height_ = height;
        return this;
    }

    /** Disposes this platform. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method int getY() {
        return y_;
    }

    /** Draws the platform on the screen */
    method void draw() {
        do Screen.setColor(true);
        do drawInternal();
        return;
    }

    /** Erases the platform from the screen */
    method void erase() {
        do Screen.setColor(false);
        do drawInternal();
        return;
    }

    method void drawInternal() {
        var int last_row;
        let last_row = Constants.boardHeight() - 1;
        if ((y_ > last_row) | (y_ + height_ < 0)) {
            return;
        }
        if (y_ + height_ > last_row) {
            do Screen.drawRectangle(
                x_, y_, x_ + width_, last_row);
            return;
        }
        if (y_ < 0) {
            do Screen.drawRectangle(x_, 0, x_ + width_, y_ + height_);
            return;
        }
        do Screen.drawRectangle(x_, y_, x_ + width_, y_ + height_);
        return;
    }

    method void shiftDown(int num_rows) {
        let y_ = y_ + num_rows;
        return;
    }

    method bool isBelowBoard() {
        var int gap_from_bottom;
        let gap_from_bottom = Constants.boardHeight() - 1 - y_;
        return (gap_from_bottom < 0);
    }
}
