// The main controller used to control the jump game. Movement of the
// platforms is delegated to the PlatformController and movement of the jumper
// is delegated to the JumperController. GameController controls both of these.

class GameController {
  field int score_;
  field bool game_over_;
  field int key_;

  field PlatformController platform_controller_; // controls the platforms.
  field ObstacleController obstacle_controller_; // controls the obstacles.
  field JumperController jumper_controller_; // controls the jumper.

  constructor GameController new(int platform_shift_size) {
    let score_ = 0;
    let game_over_ = false;
    let key_ = 0;
    let platform_controller_ = PlatformController.new(platform_shift_size);
    let obstacle_controller_ = ObstacleController.new();
    let jumper_controller_ = JumperController.new(platform_shift_size);
    return this;
  }

  method void dispose() {
    do platform_controller_.dispose();
    do obstacle_controller_.dispose();
    do jumper_controller_.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void run() {
    do printStartScreen();
    while (~(key_ = Constants.spaceKey())) {
      do Sys.wait(Constants.waitTime());
      let key_ = Keyboard.keyPressed();
    }

    do Screen.clearScreen();

    do platform_controller_.drawPlatforms();
    do jumper_controller_.drawJumper();

    let game_over_ = false;
    while (~game_over_) {
      while ((key_ = 0) & (~game_over_)) {
        let key_ = Keyboard.keyPressed();
        let score_ = score_ + 1;
        do platform_controller_.runControlLoop();
        let game_over_ = (~(jumper_controller_.runControlLoop()));
        if (score_ > 200) {
          do obstacle_controller_.runControlLoop();
        }
        do Sys.wait(Constants.waitTime());
      }

      do handleKeyInput();

      while ((~(key_ = 0)) & (~game_over_)) {
        let key_ = Keyboard.keyPressed();
        let score_ = score_ + 1;
        do platform_controller_.runControlLoop();
        let game_over_ = (~(jumper_controller_.runControlLoop()));
        if (score_ > 200) {
          do obstacle_controller_.runControlLoop();
        }
        do Sys.wait(Constants.waitTime());
      }
    }

    if (game_over_) {
      do setEndScreen();
      while (~(key_ = Constants.escKey())) {
        do Sys.wait(Constants.waitTime());
      }
    }
    return;
  }

  method void printStartScreen() {
    do Output.printString("Welcome to the Jumper game!");
    do Output.println();
    do Output.printString(
      "The goal is to stay on the platforms as long as possible.");
    do Output.println();
    do Output.printString("Use the up arrow key to start a jump.");
    do Output.println();
    do Output.printString("Use the down arrow key to end the jump.");
    do Output.println();
    do Output.printString(
      "Use the left and right arrow keys to control direction.");
    do Output.println();
    do Output.printString("Press the space bar to begin");
    return;
  }

  method void setEndScreen() {
    do Screen.clearScreen();
    do Output.moveCursor(0, 0);
    do Output.printString("Game Over");
    do Output.println();
    do Output.printString("Your score was: ");
    do Output.printInt(score_);
    return;
  }

  method void handleKeyInput() {
    // if escape key is pressed the game is over
    if (key_ = Constants.escKey()) {
      let game_over_ = true;
    }
    if ((key_ = Constants.upArrowKey()) &
        (~(jumper_controller_.isJumping()))) {
      do jumper_controller_.startJump();
    }
    if ((key_ = Constants.downArrowKey()) &
        (jumper_controller_.isJumping())) {
      do jumper_controller_.setDownMovement();
    }
    if (key_ = Constants.leftArrowKey()) {
      do jumper_controller_.setLeftMovement();
    }
    if (key_ = Constants.rightArrowKey()) {
      do jumper_controller_.setRightMovement();
    }
    return;
  }
}
