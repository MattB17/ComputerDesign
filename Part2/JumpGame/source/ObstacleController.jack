// A controller object used to manage the obstacles on the screen.

class ObstacleController {
  // the obstacle being controlled.
  field Obstacle obstacle_;

  // controls whether the next obstacle is on the left or right.
  field bool next_obstacle_on_left_;

  // the number of rows to shift the platform on each loop
  field int shift_size_;

  // Constructs a new ObstacleController.
  constructor ObstacleController new() {
    let obstacle_ = Obstacle.new(240, -15, 16, Constants.obstacleBitMap());
    let next_obstacle_on_left_ = false;
    let shift_size_ = 4;
    return this;
  }

  // Disposes of the ObstacleController.
  method void dispose() {
    do obstacle_.dispose();
    do Memory.deAlloc(this);
    return;
  }

  // Draws the current obstacle.
  method void drawObstacle() {
    do obstacle_.draw();
    return;
  }

  // Erases the current obstacle.
  method void eraseObstacle() {
    do obstacle_.erase();
    return;
  }

  // Constructs a new Obstacle and disposes of the current one.
  method void replaceObstacle() {
    if (next_obstacle_on_left_) {
      let obstacle_ = Obstacle.new(240, -15, 16, Constants.obstacleBitMap());
      let next_obstacle_on_left_ = false;
    }
    else {
      let obstacle_ = Obstacle.new(288, -15, 16, Constants.obstacleBitMap());
      let next_obstacle_on_left_ = true;
    }
    return;
  }

  // Runs the controller's control loop.
  method void runControlLoop() {
    do obstacle_.erase();

    do obstacle_.shiftDown(shift_size_);

    if (obstacle_.isBelowBoard()) {
      do replaceObstacle();
    }

    do obstacle_.draw();

    return;
  }
}
