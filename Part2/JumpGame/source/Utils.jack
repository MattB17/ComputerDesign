// Holds a set of utility (helper) functions used throughout the project.

class Utils {
  // Retrieves the memory location given the x and y coordinates on the screen.
  function int getOffset(int x, int y) {
    return (Constants.boardStart() +
            (y * Constants.blocksPerRow()) +
            (x / Constants.blockSize()));
  }

  // Determines if the y position represents a location below the board.
  function bool isBelowBoard(int y) {
    var int gap_from_bottom;
    let gap_from_bottom = Constants.boardHeight() - 1 - y;
    return (gap_from_bottom < 0);
  }

  // Draws the bitmap given by bitmap_vals at the screen location given by x
  // and y. The length of the array is height.
  function void drawBitMapArray(int x, int y, int height, Array bitmap_vals) {
    var int obj_row, curr_row, board_end, offset;
    let obj_row = 0;
    let curr_row = y;
    let board_end = Constants.boardHeight() - 1;
    let offset = Utils.getOffset(x, curr_row);

    while (obj_row < height) {
      if ((~(curr_row < 0)) & (~(curr_row > board_end))) {
        do Memory.poke(offset, bitmap_vals[obj_row]);
      }
      let offset = offset + Constants.blocksPerRow();
      let obj_row = obj_row + 1;
      let curr_row = curr_row + 1;
    }

    return;
  }

  // Erases a bitmap whose left corner is (x, y) and spans height rows. Note
  // this corresponds to erasing a height x 16 block whose left corner is
  // (x, y).
  function void eraseBitMap(int x, int y, int height) {
    var int obj_row, curr_row, board_end, offset;
    let obj_row = 0;
    let curr_row = y;
    let board_end = Constants.boardHeight() - 1;
    let offset = Utils.getOffset(x, curr_row);

    while (obj_row < height) {
      if ((~(curr_row < 0)) & (~(curr_row > board_end))) {
        do Memory.poke(offset, 0);
      }
      let offset = offset + Constants.blocksPerRow();
      let obj_row = obj_row + 1;
      let curr_row = curr_row + 1;
    }

    return;
  }
}
